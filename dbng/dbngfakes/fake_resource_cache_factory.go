// This file was generated by counterfeiter
package dbngfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc"
	"github.com/concourse/atc/dbng"
)

type FakeResourceCacheFactory struct {
	FindOrCreateResourceCacheForBuildStub        func(logger lager.Logger, buildID int, resourceTypeName string, version atc.Version, source atc.Source, params atc.Params, pipelineID int, resourceTypes atc.ResourceTypes) (*dbng.UsedResourceCache, error)
	findOrCreateResourceCacheForBuildMutex       sync.RWMutex
	findOrCreateResourceCacheForBuildArgsForCall []struct {
		logger           lager.Logger
		buildID          int
		resourceTypeName string
		version          atc.Version
		source           atc.Source
		params           atc.Params
		pipelineID       int
		resourceTypes    atc.ResourceTypes
	}
	findOrCreateResourceCacheForBuildReturns struct {
		result1 *dbng.UsedResourceCache
		result2 error
	}
	FindOrCreateResourceCacheForResourceStub        func(logger lager.Logger, resourceID int, resourceTypeName string, version atc.Version, source atc.Source, params atc.Params, pipelineID int, resourceTypes atc.ResourceTypes) (*dbng.UsedResourceCache, error)
	findOrCreateResourceCacheForResourceMutex       sync.RWMutex
	findOrCreateResourceCacheForResourceArgsForCall []struct {
		logger           lager.Logger
		resourceID       int
		resourceTypeName string
		version          atc.Version
		source           atc.Source
		params           atc.Params
		pipelineID       int
		resourceTypes    atc.ResourceTypes
	}
	findOrCreateResourceCacheForResourceReturns struct {
		result1 *dbng.UsedResourceCache
		result2 error
	}
	FindOrCreateResourceCacheForResourceTypeStub        func(logger lager.Logger, resourceTypeName string, version atc.Version, source atc.Source, params atc.Params, pipelineID int, resourceTypes atc.ResourceTypes) (*dbng.UsedResourceCache, error)
	findOrCreateResourceCacheForResourceTypeMutex       sync.RWMutex
	findOrCreateResourceCacheForResourceTypeArgsForCall []struct {
		logger           lager.Logger
		resourceTypeName string
		version          atc.Version
		source           atc.Source
		params           atc.Params
		pipelineID       int
		resourceTypes    atc.ResourceTypes
	}
	findOrCreateResourceCacheForResourceTypeReturns struct {
		result1 *dbng.UsedResourceCache
		result2 error
	}
	CleanUsesForFinishedBuildsStub        func() error
	cleanUsesForFinishedBuildsMutex       sync.RWMutex
	cleanUsesForFinishedBuildsArgsForCall []struct{}
	cleanUsesForFinishedBuildsReturns     struct {
		result1 error
	}
	CleanUsesForInactiveResourceTypesStub        func() error
	cleanUsesForInactiveResourceTypesMutex       sync.RWMutex
	cleanUsesForInactiveResourceTypesArgsForCall []struct{}
	cleanUsesForInactiveResourceTypesReturns     struct {
		result1 error
	}
	CleanUsesForInactiveResourcesStub        func() error
	cleanUsesForInactiveResourcesMutex       sync.RWMutex
	cleanUsesForInactiveResourcesArgsForCall []struct{}
	cleanUsesForInactiveResourcesReturns     struct {
		result1 error
	}
	CleanUpInvalidCachesStub        func() error
	cleanUpInvalidCachesMutex       sync.RWMutex
	cleanUpInvalidCachesArgsForCall []struct{}
	cleanUpInvalidCachesReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForBuild(logger lager.Logger, buildID int, resourceTypeName string, version atc.Version, source atc.Source, params atc.Params, pipelineID int, resourceTypes atc.ResourceTypes) (*dbng.UsedResourceCache, error) {
	fake.findOrCreateResourceCacheForBuildMutex.Lock()
	fake.findOrCreateResourceCacheForBuildArgsForCall = append(fake.findOrCreateResourceCacheForBuildArgsForCall, struct {
		logger           lager.Logger
		buildID          int
		resourceTypeName string
		version          atc.Version
		source           atc.Source
		params           atc.Params
		pipelineID       int
		resourceTypes    atc.ResourceTypes
	}{logger, buildID, resourceTypeName, version, source, params, pipelineID, resourceTypes})
	fake.recordInvocation("FindOrCreateResourceCacheForBuild", []interface{}{logger, buildID, resourceTypeName, version, source, params, pipelineID, resourceTypes})
	fake.findOrCreateResourceCacheForBuildMutex.Unlock()
	if fake.FindOrCreateResourceCacheForBuildStub != nil {
		return fake.FindOrCreateResourceCacheForBuildStub(logger, buildID, resourceTypeName, version, source, params, pipelineID, resourceTypes)
	} else {
		return fake.findOrCreateResourceCacheForBuildReturns.result1, fake.findOrCreateResourceCacheForBuildReturns.result2
	}
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForBuildCallCount() int {
	fake.findOrCreateResourceCacheForBuildMutex.RLock()
	defer fake.findOrCreateResourceCacheForBuildMutex.RUnlock()
	return len(fake.findOrCreateResourceCacheForBuildArgsForCall)
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForBuildArgsForCall(i int) (lager.Logger, int, string, atc.Version, atc.Source, atc.Params, int, atc.ResourceTypes) {
	fake.findOrCreateResourceCacheForBuildMutex.RLock()
	defer fake.findOrCreateResourceCacheForBuildMutex.RUnlock()
	return fake.findOrCreateResourceCacheForBuildArgsForCall[i].logger, fake.findOrCreateResourceCacheForBuildArgsForCall[i].buildID, fake.findOrCreateResourceCacheForBuildArgsForCall[i].resourceTypeName, fake.findOrCreateResourceCacheForBuildArgsForCall[i].version, fake.findOrCreateResourceCacheForBuildArgsForCall[i].source, fake.findOrCreateResourceCacheForBuildArgsForCall[i].params, fake.findOrCreateResourceCacheForBuildArgsForCall[i].pipelineID, fake.findOrCreateResourceCacheForBuildArgsForCall[i].resourceTypes
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForBuildReturns(result1 *dbng.UsedResourceCache, result2 error) {
	fake.FindOrCreateResourceCacheForBuildStub = nil
	fake.findOrCreateResourceCacheForBuildReturns = struct {
		result1 *dbng.UsedResourceCache
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForResource(logger lager.Logger, resourceID int, resourceTypeName string, version atc.Version, source atc.Source, params atc.Params, pipelineID int, resourceTypes atc.ResourceTypes) (*dbng.UsedResourceCache, error) {
	fake.findOrCreateResourceCacheForResourceMutex.Lock()
	fake.findOrCreateResourceCacheForResourceArgsForCall = append(fake.findOrCreateResourceCacheForResourceArgsForCall, struct {
		logger           lager.Logger
		resourceID       int
		resourceTypeName string
		version          atc.Version
		source           atc.Source
		params           atc.Params
		pipelineID       int
		resourceTypes    atc.ResourceTypes
	}{logger, resourceID, resourceTypeName, version, source, params, pipelineID, resourceTypes})
	fake.recordInvocation("FindOrCreateResourceCacheForResource", []interface{}{logger, resourceID, resourceTypeName, version, source, params, pipelineID, resourceTypes})
	fake.findOrCreateResourceCacheForResourceMutex.Unlock()
	if fake.FindOrCreateResourceCacheForResourceStub != nil {
		return fake.FindOrCreateResourceCacheForResourceStub(logger, resourceID, resourceTypeName, version, source, params, pipelineID, resourceTypes)
	} else {
		return fake.findOrCreateResourceCacheForResourceReturns.result1, fake.findOrCreateResourceCacheForResourceReturns.result2
	}
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForResourceCallCount() int {
	fake.findOrCreateResourceCacheForResourceMutex.RLock()
	defer fake.findOrCreateResourceCacheForResourceMutex.RUnlock()
	return len(fake.findOrCreateResourceCacheForResourceArgsForCall)
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForResourceArgsForCall(i int) (lager.Logger, int, string, atc.Version, atc.Source, atc.Params, int, atc.ResourceTypes) {
	fake.findOrCreateResourceCacheForResourceMutex.RLock()
	defer fake.findOrCreateResourceCacheForResourceMutex.RUnlock()
	return fake.findOrCreateResourceCacheForResourceArgsForCall[i].logger, fake.findOrCreateResourceCacheForResourceArgsForCall[i].resourceID, fake.findOrCreateResourceCacheForResourceArgsForCall[i].resourceTypeName, fake.findOrCreateResourceCacheForResourceArgsForCall[i].version, fake.findOrCreateResourceCacheForResourceArgsForCall[i].source, fake.findOrCreateResourceCacheForResourceArgsForCall[i].params, fake.findOrCreateResourceCacheForResourceArgsForCall[i].pipelineID, fake.findOrCreateResourceCacheForResourceArgsForCall[i].resourceTypes
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForResourceReturns(result1 *dbng.UsedResourceCache, result2 error) {
	fake.FindOrCreateResourceCacheForResourceStub = nil
	fake.findOrCreateResourceCacheForResourceReturns = struct {
		result1 *dbng.UsedResourceCache
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForResourceType(logger lager.Logger, resourceTypeName string, version atc.Version, source atc.Source, params atc.Params, pipelineID int, resourceTypes atc.ResourceTypes) (*dbng.UsedResourceCache, error) {
	fake.findOrCreateResourceCacheForResourceTypeMutex.Lock()
	fake.findOrCreateResourceCacheForResourceTypeArgsForCall = append(fake.findOrCreateResourceCacheForResourceTypeArgsForCall, struct {
		logger           lager.Logger
		resourceTypeName string
		version          atc.Version
		source           atc.Source
		params           atc.Params
		pipelineID       int
		resourceTypes    atc.ResourceTypes
	}{logger, resourceTypeName, version, source, params, pipelineID, resourceTypes})
	fake.recordInvocation("FindOrCreateResourceCacheForResourceType", []interface{}{logger, resourceTypeName, version, source, params, pipelineID, resourceTypes})
	fake.findOrCreateResourceCacheForResourceTypeMutex.Unlock()
	if fake.FindOrCreateResourceCacheForResourceTypeStub != nil {
		return fake.FindOrCreateResourceCacheForResourceTypeStub(logger, resourceTypeName, version, source, params, pipelineID, resourceTypes)
	} else {
		return fake.findOrCreateResourceCacheForResourceTypeReturns.result1, fake.findOrCreateResourceCacheForResourceTypeReturns.result2
	}
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForResourceTypeCallCount() int {
	fake.findOrCreateResourceCacheForResourceTypeMutex.RLock()
	defer fake.findOrCreateResourceCacheForResourceTypeMutex.RUnlock()
	return len(fake.findOrCreateResourceCacheForResourceTypeArgsForCall)
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForResourceTypeArgsForCall(i int) (lager.Logger, string, atc.Version, atc.Source, atc.Params, int, atc.ResourceTypes) {
	fake.findOrCreateResourceCacheForResourceTypeMutex.RLock()
	defer fake.findOrCreateResourceCacheForResourceTypeMutex.RUnlock()
	return fake.findOrCreateResourceCacheForResourceTypeArgsForCall[i].logger, fake.findOrCreateResourceCacheForResourceTypeArgsForCall[i].resourceTypeName, fake.findOrCreateResourceCacheForResourceTypeArgsForCall[i].version, fake.findOrCreateResourceCacheForResourceTypeArgsForCall[i].source, fake.findOrCreateResourceCacheForResourceTypeArgsForCall[i].params, fake.findOrCreateResourceCacheForResourceTypeArgsForCall[i].pipelineID, fake.findOrCreateResourceCacheForResourceTypeArgsForCall[i].resourceTypes
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForResourceTypeReturns(result1 *dbng.UsedResourceCache, result2 error) {
	fake.FindOrCreateResourceCacheForResourceTypeStub = nil
	fake.findOrCreateResourceCacheForResourceTypeReturns = struct {
		result1 *dbng.UsedResourceCache
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceCacheFactory) CleanUsesForFinishedBuilds() error {
	fake.cleanUsesForFinishedBuildsMutex.Lock()
	fake.cleanUsesForFinishedBuildsArgsForCall = append(fake.cleanUsesForFinishedBuildsArgsForCall, struct{}{})
	fake.recordInvocation("CleanUsesForFinishedBuilds", []interface{}{})
	fake.cleanUsesForFinishedBuildsMutex.Unlock()
	if fake.CleanUsesForFinishedBuildsStub != nil {
		return fake.CleanUsesForFinishedBuildsStub()
	} else {
		return fake.cleanUsesForFinishedBuildsReturns.result1
	}
}

func (fake *FakeResourceCacheFactory) CleanUsesForFinishedBuildsCallCount() int {
	fake.cleanUsesForFinishedBuildsMutex.RLock()
	defer fake.cleanUsesForFinishedBuildsMutex.RUnlock()
	return len(fake.cleanUsesForFinishedBuildsArgsForCall)
}

func (fake *FakeResourceCacheFactory) CleanUsesForFinishedBuildsReturns(result1 error) {
	fake.CleanUsesForFinishedBuildsStub = nil
	fake.cleanUsesForFinishedBuildsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheFactory) CleanUsesForInactiveResourceTypes() error {
	fake.cleanUsesForInactiveResourceTypesMutex.Lock()
	fake.cleanUsesForInactiveResourceTypesArgsForCall = append(fake.cleanUsesForInactiveResourceTypesArgsForCall, struct{}{})
	fake.recordInvocation("CleanUsesForInactiveResourceTypes", []interface{}{})
	fake.cleanUsesForInactiveResourceTypesMutex.Unlock()
	if fake.CleanUsesForInactiveResourceTypesStub != nil {
		return fake.CleanUsesForInactiveResourceTypesStub()
	} else {
		return fake.cleanUsesForInactiveResourceTypesReturns.result1
	}
}

func (fake *FakeResourceCacheFactory) CleanUsesForInactiveResourceTypesCallCount() int {
	fake.cleanUsesForInactiveResourceTypesMutex.RLock()
	defer fake.cleanUsesForInactiveResourceTypesMutex.RUnlock()
	return len(fake.cleanUsesForInactiveResourceTypesArgsForCall)
}

func (fake *FakeResourceCacheFactory) CleanUsesForInactiveResourceTypesReturns(result1 error) {
	fake.CleanUsesForInactiveResourceTypesStub = nil
	fake.cleanUsesForInactiveResourceTypesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheFactory) CleanUsesForInactiveResources() error {
	fake.cleanUsesForInactiveResourcesMutex.Lock()
	fake.cleanUsesForInactiveResourcesArgsForCall = append(fake.cleanUsesForInactiveResourcesArgsForCall, struct{}{})
	fake.recordInvocation("CleanUsesForInactiveResources", []interface{}{})
	fake.cleanUsesForInactiveResourcesMutex.Unlock()
	if fake.CleanUsesForInactiveResourcesStub != nil {
		return fake.CleanUsesForInactiveResourcesStub()
	} else {
		return fake.cleanUsesForInactiveResourcesReturns.result1
	}
}

func (fake *FakeResourceCacheFactory) CleanUsesForInactiveResourcesCallCount() int {
	fake.cleanUsesForInactiveResourcesMutex.RLock()
	defer fake.cleanUsesForInactiveResourcesMutex.RUnlock()
	return len(fake.cleanUsesForInactiveResourcesArgsForCall)
}

func (fake *FakeResourceCacheFactory) CleanUsesForInactiveResourcesReturns(result1 error) {
	fake.CleanUsesForInactiveResourcesStub = nil
	fake.cleanUsesForInactiveResourcesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheFactory) CleanUpInvalidCaches() error {
	fake.cleanUpInvalidCachesMutex.Lock()
	fake.cleanUpInvalidCachesArgsForCall = append(fake.cleanUpInvalidCachesArgsForCall, struct{}{})
	fake.recordInvocation("CleanUpInvalidCaches", []interface{}{})
	fake.cleanUpInvalidCachesMutex.Unlock()
	if fake.CleanUpInvalidCachesStub != nil {
		return fake.CleanUpInvalidCachesStub()
	} else {
		return fake.cleanUpInvalidCachesReturns.result1
	}
}

func (fake *FakeResourceCacheFactory) CleanUpInvalidCachesCallCount() int {
	fake.cleanUpInvalidCachesMutex.RLock()
	defer fake.cleanUpInvalidCachesMutex.RUnlock()
	return len(fake.cleanUpInvalidCachesArgsForCall)
}

func (fake *FakeResourceCacheFactory) CleanUpInvalidCachesReturns(result1 error) {
	fake.CleanUpInvalidCachesStub = nil
	fake.cleanUpInvalidCachesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findOrCreateResourceCacheForBuildMutex.RLock()
	defer fake.findOrCreateResourceCacheForBuildMutex.RUnlock()
	fake.findOrCreateResourceCacheForResourceMutex.RLock()
	defer fake.findOrCreateResourceCacheForResourceMutex.RUnlock()
	fake.findOrCreateResourceCacheForResourceTypeMutex.RLock()
	defer fake.findOrCreateResourceCacheForResourceTypeMutex.RUnlock()
	fake.cleanUsesForFinishedBuildsMutex.RLock()
	defer fake.cleanUsesForFinishedBuildsMutex.RUnlock()
	fake.cleanUsesForInactiveResourceTypesMutex.RLock()
	defer fake.cleanUsesForInactiveResourceTypesMutex.RUnlock()
	fake.cleanUsesForInactiveResourcesMutex.RLock()
	defer fake.cleanUsesForInactiveResourcesMutex.RUnlock()
	fake.cleanUpInvalidCachesMutex.RLock()
	defer fake.cleanUpInvalidCachesMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeResourceCacheFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dbng.ResourceCacheFactory = new(FakeResourceCacheFactory)
