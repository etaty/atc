// This file was generated by counterfeiter
package dbngfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc"
	"github.com/concourse/atc/dbng"
)

type FakeResourceConfigFactory struct {
	FindOrCreateResourceConfigForBuildStub        func(logger lager.Logger, buildID int, resourceType string, source atc.Source, pipelineID int, resourceTypes atc.ResourceTypes) (*dbng.UsedResourceConfig, error)
	findOrCreateResourceConfigForBuildMutex       sync.RWMutex
	findOrCreateResourceConfigForBuildArgsForCall []struct {
		logger        lager.Logger
		buildID       int
		resourceType  string
		source        atc.Source
		pipelineID    int
		resourceTypes atc.ResourceTypes
	}
	findOrCreateResourceConfigForBuildReturns struct {
		result1 *dbng.UsedResourceConfig
		result2 error
	}
	FindOrCreateResourceConfigForResourceStub        func(logger lager.Logger, resourceID int, resourceType string, source atc.Source, pipelineID int, resourceTypes atc.ResourceTypes) (*dbng.UsedResourceConfig, error)
	findOrCreateResourceConfigForResourceMutex       sync.RWMutex
	findOrCreateResourceConfigForResourceArgsForCall []struct {
		logger        lager.Logger
		resourceID    int
		resourceType  string
		source        atc.Source
		pipelineID    int
		resourceTypes atc.ResourceTypes
	}
	findOrCreateResourceConfigForResourceReturns struct {
		result1 *dbng.UsedResourceConfig
		result2 error
	}
	FindOrCreateResourceConfigForResourceTypeStub        func(logger lager.Logger, resourceTypeName string, source atc.Source, pipelineID int, resourceTypes atc.ResourceTypes) (*dbng.UsedResourceConfig, error)
	findOrCreateResourceConfigForResourceTypeMutex       sync.RWMutex
	findOrCreateResourceConfigForResourceTypeArgsForCall []struct {
		logger           lager.Logger
		resourceTypeName string
		source           atc.Source
		pipelineID       int
		resourceTypes    atc.ResourceTypes
	}
	findOrCreateResourceConfigForResourceTypeReturns struct {
		result1 *dbng.UsedResourceConfig
		result2 error
	}
	CleanConfigUsesForFinishedBuildsStub        func() error
	cleanConfigUsesForFinishedBuildsMutex       sync.RWMutex
	cleanConfigUsesForFinishedBuildsArgsForCall []struct{}
	cleanConfigUsesForFinishedBuildsReturns     struct {
		result1 error
	}
	CleanConfigUsesForInactiveResourceTypesStub        func() error
	cleanConfigUsesForInactiveResourceTypesMutex       sync.RWMutex
	cleanConfigUsesForInactiveResourceTypesArgsForCall []struct{}
	cleanConfigUsesForInactiveResourceTypesReturns     struct {
		result1 error
	}
	CleanConfigUsesForInactiveResourcesStub        func() error
	cleanConfigUsesForInactiveResourcesMutex       sync.RWMutex
	cleanConfigUsesForInactiveResourcesArgsForCall []struct{}
	cleanConfigUsesForInactiveResourcesReturns     struct {
		result1 error
	}
	CleanUselessConfigsStub        func() error
	cleanUselessConfigsMutex       sync.RWMutex
	cleanUselessConfigsArgsForCall []struct{}
	cleanUselessConfigsReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForBuild(logger lager.Logger, buildID int, resourceType string, source atc.Source, pipelineID int, resourceTypes atc.ResourceTypes) (*dbng.UsedResourceConfig, error) {
	fake.findOrCreateResourceConfigForBuildMutex.Lock()
	fake.findOrCreateResourceConfigForBuildArgsForCall = append(fake.findOrCreateResourceConfigForBuildArgsForCall, struct {
		logger        lager.Logger
		buildID       int
		resourceType  string
		source        atc.Source
		pipelineID    int
		resourceTypes atc.ResourceTypes
	}{logger, buildID, resourceType, source, pipelineID, resourceTypes})
	fake.recordInvocation("FindOrCreateResourceConfigForBuild", []interface{}{logger, buildID, resourceType, source, pipelineID, resourceTypes})
	fake.findOrCreateResourceConfigForBuildMutex.Unlock()
	if fake.FindOrCreateResourceConfigForBuildStub != nil {
		return fake.FindOrCreateResourceConfigForBuildStub(logger, buildID, resourceType, source, pipelineID, resourceTypes)
	} else {
		return fake.findOrCreateResourceConfigForBuildReturns.result1, fake.findOrCreateResourceConfigForBuildReturns.result2
	}
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForBuildCallCount() int {
	fake.findOrCreateResourceConfigForBuildMutex.RLock()
	defer fake.findOrCreateResourceConfigForBuildMutex.RUnlock()
	return len(fake.findOrCreateResourceConfigForBuildArgsForCall)
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForBuildArgsForCall(i int) (lager.Logger, int, string, atc.Source, int, atc.ResourceTypes) {
	fake.findOrCreateResourceConfigForBuildMutex.RLock()
	defer fake.findOrCreateResourceConfigForBuildMutex.RUnlock()
	return fake.findOrCreateResourceConfigForBuildArgsForCall[i].logger, fake.findOrCreateResourceConfigForBuildArgsForCall[i].buildID, fake.findOrCreateResourceConfigForBuildArgsForCall[i].resourceType, fake.findOrCreateResourceConfigForBuildArgsForCall[i].source, fake.findOrCreateResourceConfigForBuildArgsForCall[i].pipelineID, fake.findOrCreateResourceConfigForBuildArgsForCall[i].resourceTypes
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForBuildReturns(result1 *dbng.UsedResourceConfig, result2 error) {
	fake.FindOrCreateResourceConfigForBuildStub = nil
	fake.findOrCreateResourceConfigForBuildReturns = struct {
		result1 *dbng.UsedResourceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResource(logger lager.Logger, resourceID int, resourceType string, source atc.Source, pipelineID int, resourceTypes atc.ResourceTypes) (*dbng.UsedResourceConfig, error) {
	fake.findOrCreateResourceConfigForResourceMutex.Lock()
	fake.findOrCreateResourceConfigForResourceArgsForCall = append(fake.findOrCreateResourceConfigForResourceArgsForCall, struct {
		logger        lager.Logger
		resourceID    int
		resourceType  string
		source        atc.Source
		pipelineID    int
		resourceTypes atc.ResourceTypes
	}{logger, resourceID, resourceType, source, pipelineID, resourceTypes})
	fake.recordInvocation("FindOrCreateResourceConfigForResource", []interface{}{logger, resourceID, resourceType, source, pipelineID, resourceTypes})
	fake.findOrCreateResourceConfigForResourceMutex.Unlock()
	if fake.FindOrCreateResourceConfigForResourceStub != nil {
		return fake.FindOrCreateResourceConfigForResourceStub(logger, resourceID, resourceType, source, pipelineID, resourceTypes)
	} else {
		return fake.findOrCreateResourceConfigForResourceReturns.result1, fake.findOrCreateResourceConfigForResourceReturns.result2
	}
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResourceCallCount() int {
	fake.findOrCreateResourceConfigForResourceMutex.RLock()
	defer fake.findOrCreateResourceConfigForResourceMutex.RUnlock()
	return len(fake.findOrCreateResourceConfigForResourceArgsForCall)
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResourceArgsForCall(i int) (lager.Logger, int, string, atc.Source, int, atc.ResourceTypes) {
	fake.findOrCreateResourceConfigForResourceMutex.RLock()
	defer fake.findOrCreateResourceConfigForResourceMutex.RUnlock()
	return fake.findOrCreateResourceConfigForResourceArgsForCall[i].logger, fake.findOrCreateResourceConfigForResourceArgsForCall[i].resourceID, fake.findOrCreateResourceConfigForResourceArgsForCall[i].resourceType, fake.findOrCreateResourceConfigForResourceArgsForCall[i].source, fake.findOrCreateResourceConfigForResourceArgsForCall[i].pipelineID, fake.findOrCreateResourceConfigForResourceArgsForCall[i].resourceTypes
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResourceReturns(result1 *dbng.UsedResourceConfig, result2 error) {
	fake.FindOrCreateResourceConfigForResourceStub = nil
	fake.findOrCreateResourceConfigForResourceReturns = struct {
		result1 *dbng.UsedResourceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResourceType(logger lager.Logger, resourceTypeName string, source atc.Source, pipelineID int, resourceTypes atc.ResourceTypes) (*dbng.UsedResourceConfig, error) {
	fake.findOrCreateResourceConfigForResourceTypeMutex.Lock()
	fake.findOrCreateResourceConfigForResourceTypeArgsForCall = append(fake.findOrCreateResourceConfigForResourceTypeArgsForCall, struct {
		logger           lager.Logger
		resourceTypeName string
		source           atc.Source
		pipelineID       int
		resourceTypes    atc.ResourceTypes
	}{logger, resourceTypeName, source, pipelineID, resourceTypes})
	fake.recordInvocation("FindOrCreateResourceConfigForResourceType", []interface{}{logger, resourceTypeName, source, pipelineID, resourceTypes})
	fake.findOrCreateResourceConfigForResourceTypeMutex.Unlock()
	if fake.FindOrCreateResourceConfigForResourceTypeStub != nil {
		return fake.FindOrCreateResourceConfigForResourceTypeStub(logger, resourceTypeName, source, pipelineID, resourceTypes)
	} else {
		return fake.findOrCreateResourceConfigForResourceTypeReturns.result1, fake.findOrCreateResourceConfigForResourceTypeReturns.result2
	}
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResourceTypeCallCount() int {
	fake.findOrCreateResourceConfigForResourceTypeMutex.RLock()
	defer fake.findOrCreateResourceConfigForResourceTypeMutex.RUnlock()
	return len(fake.findOrCreateResourceConfigForResourceTypeArgsForCall)
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResourceTypeArgsForCall(i int) (lager.Logger, string, atc.Source, int, atc.ResourceTypes) {
	fake.findOrCreateResourceConfigForResourceTypeMutex.RLock()
	defer fake.findOrCreateResourceConfigForResourceTypeMutex.RUnlock()
	return fake.findOrCreateResourceConfigForResourceTypeArgsForCall[i].logger, fake.findOrCreateResourceConfigForResourceTypeArgsForCall[i].resourceTypeName, fake.findOrCreateResourceConfigForResourceTypeArgsForCall[i].source, fake.findOrCreateResourceConfigForResourceTypeArgsForCall[i].pipelineID, fake.findOrCreateResourceConfigForResourceTypeArgsForCall[i].resourceTypes
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResourceTypeReturns(result1 *dbng.UsedResourceConfig, result2 error) {
	fake.FindOrCreateResourceConfigForResourceTypeStub = nil
	fake.findOrCreateResourceConfigForResourceTypeReturns = struct {
		result1 *dbng.UsedResourceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceConfigFactory) CleanConfigUsesForFinishedBuilds() error {
	fake.cleanConfigUsesForFinishedBuildsMutex.Lock()
	fake.cleanConfigUsesForFinishedBuildsArgsForCall = append(fake.cleanConfigUsesForFinishedBuildsArgsForCall, struct{}{})
	fake.recordInvocation("CleanConfigUsesForFinishedBuilds", []interface{}{})
	fake.cleanConfigUsesForFinishedBuildsMutex.Unlock()
	if fake.CleanConfigUsesForFinishedBuildsStub != nil {
		return fake.CleanConfigUsesForFinishedBuildsStub()
	} else {
		return fake.cleanConfigUsesForFinishedBuildsReturns.result1
	}
}

func (fake *FakeResourceConfigFactory) CleanConfigUsesForFinishedBuildsCallCount() int {
	fake.cleanConfigUsesForFinishedBuildsMutex.RLock()
	defer fake.cleanConfigUsesForFinishedBuildsMutex.RUnlock()
	return len(fake.cleanConfigUsesForFinishedBuildsArgsForCall)
}

func (fake *FakeResourceConfigFactory) CleanConfigUsesForFinishedBuildsReturns(result1 error) {
	fake.CleanConfigUsesForFinishedBuildsStub = nil
	fake.cleanConfigUsesForFinishedBuildsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceConfigFactory) CleanConfigUsesForInactiveResourceTypes() error {
	fake.cleanConfigUsesForInactiveResourceTypesMutex.Lock()
	fake.cleanConfigUsesForInactiveResourceTypesArgsForCall = append(fake.cleanConfigUsesForInactiveResourceTypesArgsForCall, struct{}{})
	fake.recordInvocation("CleanConfigUsesForInactiveResourceTypes", []interface{}{})
	fake.cleanConfigUsesForInactiveResourceTypesMutex.Unlock()
	if fake.CleanConfigUsesForInactiveResourceTypesStub != nil {
		return fake.CleanConfigUsesForInactiveResourceTypesStub()
	} else {
		return fake.cleanConfigUsesForInactiveResourceTypesReturns.result1
	}
}

func (fake *FakeResourceConfigFactory) CleanConfigUsesForInactiveResourceTypesCallCount() int {
	fake.cleanConfigUsesForInactiveResourceTypesMutex.RLock()
	defer fake.cleanConfigUsesForInactiveResourceTypesMutex.RUnlock()
	return len(fake.cleanConfigUsesForInactiveResourceTypesArgsForCall)
}

func (fake *FakeResourceConfigFactory) CleanConfigUsesForInactiveResourceTypesReturns(result1 error) {
	fake.CleanConfigUsesForInactiveResourceTypesStub = nil
	fake.cleanConfigUsesForInactiveResourceTypesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceConfigFactory) CleanConfigUsesForInactiveResources() error {
	fake.cleanConfigUsesForInactiveResourcesMutex.Lock()
	fake.cleanConfigUsesForInactiveResourcesArgsForCall = append(fake.cleanConfigUsesForInactiveResourcesArgsForCall, struct{}{})
	fake.recordInvocation("CleanConfigUsesForInactiveResources", []interface{}{})
	fake.cleanConfigUsesForInactiveResourcesMutex.Unlock()
	if fake.CleanConfigUsesForInactiveResourcesStub != nil {
		return fake.CleanConfigUsesForInactiveResourcesStub()
	} else {
		return fake.cleanConfigUsesForInactiveResourcesReturns.result1
	}
}

func (fake *FakeResourceConfigFactory) CleanConfigUsesForInactiveResourcesCallCount() int {
	fake.cleanConfigUsesForInactiveResourcesMutex.RLock()
	defer fake.cleanConfigUsesForInactiveResourcesMutex.RUnlock()
	return len(fake.cleanConfigUsesForInactiveResourcesArgsForCall)
}

func (fake *FakeResourceConfigFactory) CleanConfigUsesForInactiveResourcesReturns(result1 error) {
	fake.CleanConfigUsesForInactiveResourcesStub = nil
	fake.cleanConfigUsesForInactiveResourcesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceConfigFactory) CleanUselessConfigs() error {
	fake.cleanUselessConfigsMutex.Lock()
	fake.cleanUselessConfigsArgsForCall = append(fake.cleanUselessConfigsArgsForCall, struct{}{})
	fake.recordInvocation("CleanUselessConfigs", []interface{}{})
	fake.cleanUselessConfigsMutex.Unlock()
	if fake.CleanUselessConfigsStub != nil {
		return fake.CleanUselessConfigsStub()
	} else {
		return fake.cleanUselessConfigsReturns.result1
	}
}

func (fake *FakeResourceConfigFactory) CleanUselessConfigsCallCount() int {
	fake.cleanUselessConfigsMutex.RLock()
	defer fake.cleanUselessConfigsMutex.RUnlock()
	return len(fake.cleanUselessConfigsArgsForCall)
}

func (fake *FakeResourceConfigFactory) CleanUselessConfigsReturns(result1 error) {
	fake.CleanUselessConfigsStub = nil
	fake.cleanUselessConfigsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceConfigFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findOrCreateResourceConfigForBuildMutex.RLock()
	defer fake.findOrCreateResourceConfigForBuildMutex.RUnlock()
	fake.findOrCreateResourceConfigForResourceMutex.RLock()
	defer fake.findOrCreateResourceConfigForResourceMutex.RUnlock()
	fake.findOrCreateResourceConfigForResourceTypeMutex.RLock()
	defer fake.findOrCreateResourceConfigForResourceTypeMutex.RUnlock()
	fake.cleanConfigUsesForFinishedBuildsMutex.RLock()
	defer fake.cleanConfigUsesForFinishedBuildsMutex.RUnlock()
	fake.cleanConfigUsesForInactiveResourceTypesMutex.RLock()
	defer fake.cleanConfigUsesForInactiveResourceTypesMutex.RUnlock()
	fake.cleanConfigUsesForInactiveResourcesMutex.RLock()
	defer fake.cleanConfigUsesForInactiveResourcesMutex.RUnlock()
	fake.cleanUselessConfigsMutex.RLock()
	defer fake.cleanUselessConfigsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeResourceConfigFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dbng.ResourceConfigFactory = new(FakeResourceConfigFactory)
