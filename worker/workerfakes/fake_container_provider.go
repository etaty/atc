// This file was generated by counterfeiter
package workerfakes

import (
	"os"
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc"
	"github.com/concourse/atc/dbng"
	"github.com/concourse/atc/worker"
)

type FakeContainerProvider struct {
	FindContainerByHandleStub        func(logger lager.Logger, handle string) (worker.Container, bool, error)
	findContainerByHandleMutex       sync.RWMutex
	findContainerByHandleArgsForCall []struct {
		logger lager.Logger
		handle string
	}
	findContainerByHandleReturns struct {
		result1 worker.Container
		result2 bool
		result3 error
	}
	FindOrCreateContainerStub        func(logger lager.Logger, cancel <-chan os.Signal, creatingContainer *dbng.CreatingContainer, delegate worker.ImageFetchingDelegate, id worker.Identifier, potato worker.Potato, metadata worker.Metadata, spec worker.ContainerSpec, resourceTypes atc.ResourceTypes, outputPaths map[string]string) (worker.Container, error)
	findOrCreateContainerMutex       sync.RWMutex
	findOrCreateContainerArgsForCall []struct {
		logger            lager.Logger
		cancel            <-chan os.Signal
		creatingContainer *dbng.CreatingContainer
		delegate          worker.ImageFetchingDelegate
		id                worker.Identifier
		potato            worker.Potato
		metadata          worker.Metadata
		spec              worker.ContainerSpec
		resourceTypes     atc.ResourceTypes
		outputPaths       map[string]string
	}
	findOrCreateContainerReturns struct {
		result1 worker.Container
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerProvider) FindContainerByHandle(logger lager.Logger, handle string) (worker.Container, bool, error) {
	fake.findContainerByHandleMutex.Lock()
	fake.findContainerByHandleArgsForCall = append(fake.findContainerByHandleArgsForCall, struct {
		logger lager.Logger
		handle string
	}{logger, handle})
	fake.recordInvocation("FindContainerByHandle", []interface{}{logger, handle})
	fake.findContainerByHandleMutex.Unlock()
	if fake.FindContainerByHandleStub != nil {
		return fake.FindContainerByHandleStub(logger, handle)
	} else {
		return fake.findContainerByHandleReturns.result1, fake.findContainerByHandleReturns.result2, fake.findContainerByHandleReturns.result3
	}
}

func (fake *FakeContainerProvider) FindContainerByHandleCallCount() int {
	fake.findContainerByHandleMutex.RLock()
	defer fake.findContainerByHandleMutex.RUnlock()
	return len(fake.findContainerByHandleArgsForCall)
}

func (fake *FakeContainerProvider) FindContainerByHandleArgsForCall(i int) (lager.Logger, string) {
	fake.findContainerByHandleMutex.RLock()
	defer fake.findContainerByHandleMutex.RUnlock()
	return fake.findContainerByHandleArgsForCall[i].logger, fake.findContainerByHandleArgsForCall[i].handle
}

func (fake *FakeContainerProvider) FindContainerByHandleReturns(result1 worker.Container, result2 bool, result3 error) {
	fake.FindContainerByHandleStub = nil
	fake.findContainerByHandleReturns = struct {
		result1 worker.Container
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeContainerProvider) FindOrCreateContainer(logger lager.Logger, cancel <-chan os.Signal, creatingContainer *dbng.CreatingContainer, delegate worker.ImageFetchingDelegate, id worker.Identifier, potato worker.Potato, metadata worker.Metadata, spec worker.ContainerSpec, resourceTypes atc.ResourceTypes, outputPaths map[string]string) (worker.Container, error) {
	fake.findOrCreateContainerMutex.Lock()
	fake.findOrCreateContainerArgsForCall = append(fake.findOrCreateContainerArgsForCall, struct {
		logger            lager.Logger
		cancel            <-chan os.Signal
		creatingContainer *dbng.CreatingContainer
		delegate          worker.ImageFetchingDelegate
		id                worker.Identifier
		potato            worker.Potato
		metadata          worker.Metadata
		spec              worker.ContainerSpec
		resourceTypes     atc.ResourceTypes
		outputPaths       map[string]string
	}{logger, cancel, creatingContainer, delegate, id, potato, metadata, spec, resourceTypes, outputPaths})
	fake.recordInvocation("FindOrCreateContainer", []interface{}{logger, cancel, creatingContainer, delegate, id, potato, metadata, spec, resourceTypes, outputPaths})
	fake.findOrCreateContainerMutex.Unlock()
	if fake.FindOrCreateContainerStub != nil {
		return fake.FindOrCreateContainerStub(logger, cancel, creatingContainer, delegate, id, potato, metadata, spec, resourceTypes, outputPaths)
	} else {
		return fake.findOrCreateContainerReturns.result1, fake.findOrCreateContainerReturns.result2
	}
}

func (fake *FakeContainerProvider) FindOrCreateContainerCallCount() int {
	fake.findOrCreateContainerMutex.RLock()
	defer fake.findOrCreateContainerMutex.RUnlock()
	return len(fake.findOrCreateContainerArgsForCall)
}

func (fake *FakeContainerProvider) FindOrCreateContainerArgsForCall(i int) (lager.Logger, <-chan os.Signal, *dbng.CreatingContainer, worker.ImageFetchingDelegate, worker.Identifier, worker.Potato, worker.Metadata, worker.ContainerSpec, atc.ResourceTypes, map[string]string) {
	fake.findOrCreateContainerMutex.RLock()
	defer fake.findOrCreateContainerMutex.RUnlock()
	return fake.findOrCreateContainerArgsForCall[i].logger, fake.findOrCreateContainerArgsForCall[i].cancel, fake.findOrCreateContainerArgsForCall[i].creatingContainer, fake.findOrCreateContainerArgsForCall[i].delegate, fake.findOrCreateContainerArgsForCall[i].id, fake.findOrCreateContainerArgsForCall[i].potato, fake.findOrCreateContainerArgsForCall[i].metadata, fake.findOrCreateContainerArgsForCall[i].spec, fake.findOrCreateContainerArgsForCall[i].resourceTypes, fake.findOrCreateContainerArgsForCall[i].outputPaths
}

func (fake *FakeContainerProvider) FindOrCreateContainerReturns(result1 worker.Container, result2 error) {
	fake.FindOrCreateContainerStub = nil
	fake.findOrCreateContainerReturns = struct {
		result1 worker.Container
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findContainerByHandleMutex.RLock()
	defer fake.findContainerByHandleMutex.RUnlock()
	fake.findOrCreateContainerMutex.RLock()
	defer fake.findOrCreateContainerMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeContainerProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.ContainerProvider = new(FakeContainerProvider)
