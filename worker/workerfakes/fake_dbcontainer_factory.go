// This file was generated by counterfeiter
package workerfakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/dbng"
	"github.com/concourse/atc/worker"
)

type FakeDBContainerFactory struct {
	FindBuildContainerStub        func(workerName string, buildID int, planID atc.PlanID, meta dbng.ContainerMetadata) (*dbng.CreatingContainer, *dbng.CreatedContainer, error)
	findBuildContainerMutex       sync.RWMutex
	findBuildContainerArgsForCall []struct {
		workerName string
		buildID    int
		planID     atc.PlanID
		meta       dbng.ContainerMetadata
	}
	findBuildContainerReturns struct {
		result1 *dbng.CreatingContainer
		result2 *dbng.CreatedContainer
		result3 error
	}
	CreateBuildContainerStub        func(worker *dbng.Worker, build *dbng.Build, planID atc.PlanID, meta dbng.ContainerMetadata) (*dbng.CreatingContainer, error)
	createBuildContainerMutex       sync.RWMutex
	createBuildContainerArgsForCall []struct {
		worker *dbng.Worker
		build  *dbng.Build
		planID atc.PlanID
		meta   dbng.ContainerMetadata
	}
	createBuildContainerReturns struct {
		result1 *dbng.CreatingContainer
		result2 error
	}
	FindResourceGetContainerStub        func(workerName string, resourceCacheID int, stepName string) (*dbng.CreatingContainer, *dbng.CreatedContainer, error)
	findResourceGetContainerMutex       sync.RWMutex
	findResourceGetContainerArgsForCall []struct {
		workerName      string
		resourceCacheID int
		stepName        string
	}
	findResourceGetContainerReturns struct {
		result1 *dbng.CreatingContainer
		result2 *dbng.CreatedContainer
		result3 error
	}
	CreateResourceGetContainerStub        func(worker *dbng.Worker, resourceCache *dbng.UsedResourceCache, stepName string) (*dbng.CreatingContainer, error)
	createResourceGetContainerMutex       sync.RWMutex
	createResourceGetContainerArgsForCall []struct {
		worker        *dbng.Worker
		resourceCache *dbng.UsedResourceCache
		stepName      string
	}
	createResourceGetContainerReturns struct {
		result1 *dbng.CreatingContainer
		result2 error
	}
	FindResourceCheckContainerStub        func(workerName string, resourceConfigID int, stepName string) (*dbng.CreatingContainer, *dbng.CreatedContainer, error)
	findResourceCheckContainerMutex       sync.RWMutex
	findResourceCheckContainerArgsForCall []struct {
		workerName       string
		resourceConfigID int
		stepName         string
	}
	findResourceCheckContainerReturns struct {
		result1 *dbng.CreatingContainer
		result2 *dbng.CreatedContainer
		result3 error
	}
	CreateResourceCheckContainerStub        func(worker *dbng.Worker, resourceConfig *dbng.UsedResourceConfig, stepName string) (*dbng.CreatingContainer, error)
	createResourceCheckContainerMutex       sync.RWMutex
	createResourceCheckContainerArgsForCall []struct {
		worker         *dbng.Worker
		resourceConfig *dbng.UsedResourceConfig
		stepName       string
	}
	createResourceCheckContainerReturns struct {
		result1 *dbng.CreatingContainer
		result2 error
	}
	FindContainerStub        func(handle string) (*dbng.CreatingContainer, *dbng.CreatedContainer, error)
	findContainerMutex       sync.RWMutex
	findContainerArgsForCall []struct {
		handle string
	}
	findContainerReturns struct {
		result1 *dbng.CreatingContainer
		result2 *dbng.CreatedContainer
		result3 error
	}
	ContainerCreatedStub        func(*dbng.CreatingContainer) (*dbng.CreatedContainer, error)
	containerCreatedMutex       sync.RWMutex
	containerCreatedArgsForCall []struct {
		arg1 *dbng.CreatingContainer
	}
	containerCreatedReturns struct {
		result1 *dbng.CreatedContainer
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDBContainerFactory) FindBuildContainer(workerName string, buildID int, planID atc.PlanID, meta dbng.ContainerMetadata) (*dbng.CreatingContainer, *dbng.CreatedContainer, error) {
	fake.findBuildContainerMutex.Lock()
	fake.findBuildContainerArgsForCall = append(fake.findBuildContainerArgsForCall, struct {
		workerName string
		buildID    int
		planID     atc.PlanID
		meta       dbng.ContainerMetadata
	}{workerName, buildID, planID, meta})
	fake.recordInvocation("FindBuildContainer", []interface{}{workerName, buildID, planID, meta})
	fake.findBuildContainerMutex.Unlock()
	if fake.FindBuildContainerStub != nil {
		return fake.FindBuildContainerStub(workerName, buildID, planID, meta)
	} else {
		return fake.findBuildContainerReturns.result1, fake.findBuildContainerReturns.result2, fake.findBuildContainerReturns.result3
	}
}

func (fake *FakeDBContainerFactory) FindBuildContainerCallCount() int {
	fake.findBuildContainerMutex.RLock()
	defer fake.findBuildContainerMutex.RUnlock()
	return len(fake.findBuildContainerArgsForCall)
}

func (fake *FakeDBContainerFactory) FindBuildContainerArgsForCall(i int) (string, int, atc.PlanID, dbng.ContainerMetadata) {
	fake.findBuildContainerMutex.RLock()
	defer fake.findBuildContainerMutex.RUnlock()
	return fake.findBuildContainerArgsForCall[i].workerName, fake.findBuildContainerArgsForCall[i].buildID, fake.findBuildContainerArgsForCall[i].planID, fake.findBuildContainerArgsForCall[i].meta
}

func (fake *FakeDBContainerFactory) FindBuildContainerReturns(result1 *dbng.CreatingContainer, result2 *dbng.CreatedContainer, result3 error) {
	fake.FindBuildContainerStub = nil
	fake.findBuildContainerReturns = struct {
		result1 *dbng.CreatingContainer
		result2 *dbng.CreatedContainer
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDBContainerFactory) CreateBuildContainer(worker *dbng.Worker, build *dbng.Build, planID atc.PlanID, meta dbng.ContainerMetadata) (*dbng.CreatingContainer, error) {
	fake.createBuildContainerMutex.Lock()
	fake.createBuildContainerArgsForCall = append(fake.createBuildContainerArgsForCall, struct {
		worker *dbng.Worker
		build  *dbng.Build
		planID atc.PlanID
		meta   dbng.ContainerMetadata
	}{worker, build, planID, meta})
	fake.recordInvocation("CreateBuildContainer", []interface{}{worker, build, planID, meta})
	fake.createBuildContainerMutex.Unlock()
	if fake.CreateBuildContainerStub != nil {
		return fake.CreateBuildContainerStub(worker, build, planID, meta)
	} else {
		return fake.createBuildContainerReturns.result1, fake.createBuildContainerReturns.result2
	}
}

func (fake *FakeDBContainerFactory) CreateBuildContainerCallCount() int {
	fake.createBuildContainerMutex.RLock()
	defer fake.createBuildContainerMutex.RUnlock()
	return len(fake.createBuildContainerArgsForCall)
}

func (fake *FakeDBContainerFactory) CreateBuildContainerArgsForCall(i int) (*dbng.Worker, *dbng.Build, atc.PlanID, dbng.ContainerMetadata) {
	fake.createBuildContainerMutex.RLock()
	defer fake.createBuildContainerMutex.RUnlock()
	return fake.createBuildContainerArgsForCall[i].worker, fake.createBuildContainerArgsForCall[i].build, fake.createBuildContainerArgsForCall[i].planID, fake.createBuildContainerArgsForCall[i].meta
}

func (fake *FakeDBContainerFactory) CreateBuildContainerReturns(result1 *dbng.CreatingContainer, result2 error) {
	fake.CreateBuildContainerStub = nil
	fake.createBuildContainerReturns = struct {
		result1 *dbng.CreatingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeDBContainerFactory) FindResourceGetContainer(workerName string, resourceCacheID int, stepName string) (*dbng.CreatingContainer, *dbng.CreatedContainer, error) {
	fake.findResourceGetContainerMutex.Lock()
	fake.findResourceGetContainerArgsForCall = append(fake.findResourceGetContainerArgsForCall, struct {
		workerName      string
		resourceCacheID int
		stepName        string
	}{workerName, resourceCacheID, stepName})
	fake.recordInvocation("FindResourceGetContainer", []interface{}{workerName, resourceCacheID, stepName})
	fake.findResourceGetContainerMutex.Unlock()
	if fake.FindResourceGetContainerStub != nil {
		return fake.FindResourceGetContainerStub(workerName, resourceCacheID, stepName)
	} else {
		return fake.findResourceGetContainerReturns.result1, fake.findResourceGetContainerReturns.result2, fake.findResourceGetContainerReturns.result3
	}
}

func (fake *FakeDBContainerFactory) FindResourceGetContainerCallCount() int {
	fake.findResourceGetContainerMutex.RLock()
	defer fake.findResourceGetContainerMutex.RUnlock()
	return len(fake.findResourceGetContainerArgsForCall)
}

func (fake *FakeDBContainerFactory) FindResourceGetContainerArgsForCall(i int) (string, int, string) {
	fake.findResourceGetContainerMutex.RLock()
	defer fake.findResourceGetContainerMutex.RUnlock()
	return fake.findResourceGetContainerArgsForCall[i].workerName, fake.findResourceGetContainerArgsForCall[i].resourceCacheID, fake.findResourceGetContainerArgsForCall[i].stepName
}

func (fake *FakeDBContainerFactory) FindResourceGetContainerReturns(result1 *dbng.CreatingContainer, result2 *dbng.CreatedContainer, result3 error) {
	fake.FindResourceGetContainerStub = nil
	fake.findResourceGetContainerReturns = struct {
		result1 *dbng.CreatingContainer
		result2 *dbng.CreatedContainer
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDBContainerFactory) CreateResourceGetContainer(worker *dbng.Worker, resourceCache *dbng.UsedResourceCache, stepName string) (*dbng.CreatingContainer, error) {
	fake.createResourceGetContainerMutex.Lock()
	fake.createResourceGetContainerArgsForCall = append(fake.createResourceGetContainerArgsForCall, struct {
		worker        *dbng.Worker
		resourceCache *dbng.UsedResourceCache
		stepName      string
	}{worker, resourceCache, stepName})
	fake.recordInvocation("CreateResourceGetContainer", []interface{}{worker, resourceCache, stepName})
	fake.createResourceGetContainerMutex.Unlock()
	if fake.CreateResourceGetContainerStub != nil {
		return fake.CreateResourceGetContainerStub(worker, resourceCache, stepName)
	} else {
		return fake.createResourceGetContainerReturns.result1, fake.createResourceGetContainerReturns.result2
	}
}

func (fake *FakeDBContainerFactory) CreateResourceGetContainerCallCount() int {
	fake.createResourceGetContainerMutex.RLock()
	defer fake.createResourceGetContainerMutex.RUnlock()
	return len(fake.createResourceGetContainerArgsForCall)
}

func (fake *FakeDBContainerFactory) CreateResourceGetContainerArgsForCall(i int) (*dbng.Worker, *dbng.UsedResourceCache, string) {
	fake.createResourceGetContainerMutex.RLock()
	defer fake.createResourceGetContainerMutex.RUnlock()
	return fake.createResourceGetContainerArgsForCall[i].worker, fake.createResourceGetContainerArgsForCall[i].resourceCache, fake.createResourceGetContainerArgsForCall[i].stepName
}

func (fake *FakeDBContainerFactory) CreateResourceGetContainerReturns(result1 *dbng.CreatingContainer, result2 error) {
	fake.CreateResourceGetContainerStub = nil
	fake.createResourceGetContainerReturns = struct {
		result1 *dbng.CreatingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeDBContainerFactory) FindResourceCheckContainer(workerName string, resourceConfigID int, stepName string) (*dbng.CreatingContainer, *dbng.CreatedContainer, error) {
	fake.findResourceCheckContainerMutex.Lock()
	fake.findResourceCheckContainerArgsForCall = append(fake.findResourceCheckContainerArgsForCall, struct {
		workerName       string
		resourceConfigID int
		stepName         string
	}{workerName, resourceConfigID, stepName})
	fake.recordInvocation("FindResourceCheckContainer", []interface{}{workerName, resourceConfigID, stepName})
	fake.findResourceCheckContainerMutex.Unlock()
	if fake.FindResourceCheckContainerStub != nil {
		return fake.FindResourceCheckContainerStub(workerName, resourceConfigID, stepName)
	} else {
		return fake.findResourceCheckContainerReturns.result1, fake.findResourceCheckContainerReturns.result2, fake.findResourceCheckContainerReturns.result3
	}
}

func (fake *FakeDBContainerFactory) FindResourceCheckContainerCallCount() int {
	fake.findResourceCheckContainerMutex.RLock()
	defer fake.findResourceCheckContainerMutex.RUnlock()
	return len(fake.findResourceCheckContainerArgsForCall)
}

func (fake *FakeDBContainerFactory) FindResourceCheckContainerArgsForCall(i int) (string, int, string) {
	fake.findResourceCheckContainerMutex.RLock()
	defer fake.findResourceCheckContainerMutex.RUnlock()
	return fake.findResourceCheckContainerArgsForCall[i].workerName, fake.findResourceCheckContainerArgsForCall[i].resourceConfigID, fake.findResourceCheckContainerArgsForCall[i].stepName
}

func (fake *FakeDBContainerFactory) FindResourceCheckContainerReturns(result1 *dbng.CreatingContainer, result2 *dbng.CreatedContainer, result3 error) {
	fake.FindResourceCheckContainerStub = nil
	fake.findResourceCheckContainerReturns = struct {
		result1 *dbng.CreatingContainer
		result2 *dbng.CreatedContainer
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDBContainerFactory) CreateResourceCheckContainer(worker *dbng.Worker, resourceConfig *dbng.UsedResourceConfig, stepName string) (*dbng.CreatingContainer, error) {
	fake.createResourceCheckContainerMutex.Lock()
	fake.createResourceCheckContainerArgsForCall = append(fake.createResourceCheckContainerArgsForCall, struct {
		worker         *dbng.Worker
		resourceConfig *dbng.UsedResourceConfig
		stepName       string
	}{worker, resourceConfig, stepName})
	fake.recordInvocation("CreateResourceCheckContainer", []interface{}{worker, resourceConfig, stepName})
	fake.createResourceCheckContainerMutex.Unlock()
	if fake.CreateResourceCheckContainerStub != nil {
		return fake.CreateResourceCheckContainerStub(worker, resourceConfig, stepName)
	} else {
		return fake.createResourceCheckContainerReturns.result1, fake.createResourceCheckContainerReturns.result2
	}
}

func (fake *FakeDBContainerFactory) CreateResourceCheckContainerCallCount() int {
	fake.createResourceCheckContainerMutex.RLock()
	defer fake.createResourceCheckContainerMutex.RUnlock()
	return len(fake.createResourceCheckContainerArgsForCall)
}

func (fake *FakeDBContainerFactory) CreateResourceCheckContainerArgsForCall(i int) (*dbng.Worker, *dbng.UsedResourceConfig, string) {
	fake.createResourceCheckContainerMutex.RLock()
	defer fake.createResourceCheckContainerMutex.RUnlock()
	return fake.createResourceCheckContainerArgsForCall[i].worker, fake.createResourceCheckContainerArgsForCall[i].resourceConfig, fake.createResourceCheckContainerArgsForCall[i].stepName
}

func (fake *FakeDBContainerFactory) CreateResourceCheckContainerReturns(result1 *dbng.CreatingContainer, result2 error) {
	fake.CreateResourceCheckContainerStub = nil
	fake.createResourceCheckContainerReturns = struct {
		result1 *dbng.CreatingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeDBContainerFactory) FindContainer(handle string) (*dbng.CreatingContainer, *dbng.CreatedContainer, error) {
	fake.findContainerMutex.Lock()
	fake.findContainerArgsForCall = append(fake.findContainerArgsForCall, struct {
		handle string
	}{handle})
	fake.recordInvocation("FindContainer", []interface{}{handle})
	fake.findContainerMutex.Unlock()
	if fake.FindContainerStub != nil {
		return fake.FindContainerStub(handle)
	} else {
		return fake.findContainerReturns.result1, fake.findContainerReturns.result2, fake.findContainerReturns.result3
	}
}

func (fake *FakeDBContainerFactory) FindContainerCallCount() int {
	fake.findContainerMutex.RLock()
	defer fake.findContainerMutex.RUnlock()
	return len(fake.findContainerArgsForCall)
}

func (fake *FakeDBContainerFactory) FindContainerArgsForCall(i int) string {
	fake.findContainerMutex.RLock()
	defer fake.findContainerMutex.RUnlock()
	return fake.findContainerArgsForCall[i].handle
}

func (fake *FakeDBContainerFactory) FindContainerReturns(result1 *dbng.CreatingContainer, result2 *dbng.CreatedContainer, result3 error) {
	fake.FindContainerStub = nil
	fake.findContainerReturns = struct {
		result1 *dbng.CreatingContainer
		result2 *dbng.CreatedContainer
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDBContainerFactory) ContainerCreated(arg1 *dbng.CreatingContainer) (*dbng.CreatedContainer, error) {
	fake.containerCreatedMutex.Lock()
	fake.containerCreatedArgsForCall = append(fake.containerCreatedArgsForCall, struct {
		arg1 *dbng.CreatingContainer
	}{arg1})
	fake.recordInvocation("ContainerCreated", []interface{}{arg1})
	fake.containerCreatedMutex.Unlock()
	if fake.ContainerCreatedStub != nil {
		return fake.ContainerCreatedStub(arg1)
	} else {
		return fake.containerCreatedReturns.result1, fake.containerCreatedReturns.result2
	}
}

func (fake *FakeDBContainerFactory) ContainerCreatedCallCount() int {
	fake.containerCreatedMutex.RLock()
	defer fake.containerCreatedMutex.RUnlock()
	return len(fake.containerCreatedArgsForCall)
}

func (fake *FakeDBContainerFactory) ContainerCreatedArgsForCall(i int) *dbng.CreatingContainer {
	fake.containerCreatedMutex.RLock()
	defer fake.containerCreatedMutex.RUnlock()
	return fake.containerCreatedArgsForCall[i].arg1
}

func (fake *FakeDBContainerFactory) ContainerCreatedReturns(result1 *dbng.CreatedContainer, result2 error) {
	fake.ContainerCreatedStub = nil
	fake.containerCreatedReturns = struct {
		result1 *dbng.CreatedContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeDBContainerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findBuildContainerMutex.RLock()
	defer fake.findBuildContainerMutex.RUnlock()
	fake.createBuildContainerMutex.RLock()
	defer fake.createBuildContainerMutex.RUnlock()
	fake.findResourceGetContainerMutex.RLock()
	defer fake.findResourceGetContainerMutex.RUnlock()
	fake.createResourceGetContainerMutex.RLock()
	defer fake.createResourceGetContainerMutex.RUnlock()
	fake.findResourceCheckContainerMutex.RLock()
	defer fake.findResourceCheckContainerMutex.RUnlock()
	fake.createResourceCheckContainerMutex.RLock()
	defer fake.createResourceCheckContainerMutex.RUnlock()
	fake.findContainerMutex.RLock()
	defer fake.findContainerMutex.RUnlock()
	fake.containerCreatedMutex.RLock()
	defer fake.containerCreatedMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDBContainerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.DBContainerFactory = new(FakeDBContainerFactory)
